
###################################################################################
#THIS SCRIPT SHOULD BE RUN AS ROOT												  #
#																				  #
#The shinegw-rasbian-installer_2.1.sh bash script is the second part of the 	  #
#SD replicating system for the SMU-TCS iCity Labs RPi Gateway. This script 		  #
#initially partition (sfdisk) and format  the SD card into a 60MB FAT partition	  #
#and the rest of the SD into a linux Ext partition. Then it mounts the 			  #
#Ext partition to ‘/media/os’ and FAT partition to ‘/media/os/boot’ and 		  #
#extract the previously generated tarball made by the make_tarball.sh script. 	  #
#																				  #
#Please note that the older versions of sfdisk gets the partitioning table 		  #
#parameters in a different template than the newer versions. Both the versions 	  #
#are included in the script. Please feel free to change the version checking 	  #
#statement (# Check for the version) of the script as required. 				  #
#																				  #
#If the ssh key to the server was given as the last parameter, the script will    #
#download the ‘shineseniors-reverse-ssh-key’ file from the aws.shineseniors.org   #
#server and copy into the /root/shine folder. Given below are the key parameters  #
#used while copying files from the cloud server. 								  #
# #Configuration																  #
#	KEYSERVER_LOCATION="name_of_the_key_server"									  #
#	KEYSERVER_USERNAME="user_account_name_of_the_provided_key"					  #
#	SHINEGW_FILES_DIR="location_of_the ‘shineseniors-reverse-ssh-key’ file"		  #
#																				  #
#Using shinegw-rasbian-installer script:										  #
#																				  #
#Install prerequisite software:													  #
#$sudo apt-get -y install pv bsdtar 											  #
#																				  #
#Usage: $0 <device> <path to Raspbian TarBall generated by make_tarball.sh script>#
#<location to the shine seniors folder> <target node ID (integer)> 				  #
#[optional: key file to key-server]												  #
#Please note that the “device” should be the path to a block device. As an example#
#you should enter:                                                                #
#          $sudo ./shinegw-rasbian-installer_2.1.sh /dev/mmcblk0 <> <> <> ...     #
#  BUT NOT $sudo ./shinegw-rasbian-installer_2.1.sh /dev/mmcblk0p1 <> <> <> ...   #
#																				  #
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR       #
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS #
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR   #
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER   #
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN          #
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.       #
#																				  #
# Version 2.1																	  #
###################################################################################

cleanup_on_exit() {
	umount -f ${BOOT_PARTITIOIN}
	umount -f ${ROOT_PARTITIOIN}
	#rm -rf /media/boot 2>/dev/null
	rm -rf /media/os 2>/dev/null
}

#*****************Installing the OS******************#

echo "***********************************************"
echo "*       Shine Seniors Rasbian Installer       *"
echo "***********************************************"
echo 
# Messages
ERR="[ERROR]"
NOTE="[NOTICE]"
WARN="[WARNING]"
USAGE="Usage: $0 <device> <path to Raspbian TarBall> <shine seniors folder> <target node ID (integer)> [optional: key file to key-server]"

# Assign to sensible variable name for sanity
DEVICE="$1"
TARBALL_PATH="$2"
SHINE_FOLDER="$3"
TARGET_NODEID="$4"
KEYSERVER_KEY="$5"

# Config file settings
CONFIG_FILE='/media/os/root/shine/input.config'
ROOT_FOLDER_SD='/media/os/root/'
SHINE_FOLDER_SD='/media/os/root/shine/'
HOST_NAME='/media/os/etc/hostname'
HOSTS_FILE='/media/os/etc/hosts'
NODE_ID_VAR_NAME='generic.node-id'
SSH_KEYFILE='/media/os/root/shine/shineseniors-reverse-ssh-key'

# Configuration
KEYSERVER_LOCATION="aws.shineseniors.org"
KEYSERVER_USERNAME="user"
SHINEGW_FILES_DIR="/home/user/shinegw-files"
#SHINEGW_FILES_DIR="/home/ubuntu/shinegw-files/root/shine/"

# Reverse SSH Key
SSH_KEYFILE_NAME="shineseniors-reverse-ssh-key"
SSH_KEYFILE_PERM="600"
#REQUIRED_FILES_DEST_DIR[0]="root/shine/"

#Test for root
if [ $EUID -ne 0 ]; then
	echo "$ERR This script must be run as root."
	exit 1
fi

# Test for number of arguments
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
	echo "$ERR $USAGE"
	echo -e "Use \$df -h to display <device> [eg: /dev/mmcblk0, /dev/scb]"
	exit 1
fi

# Generate partition names
if echo $DEVICE | grep -qs mmcblk; then
    BOOT_PARTITIOIN="${DEVICE}p1"
    ROOT_PARTITIOIN="${DEVICE}p2"
else
    BOOT_PARTITIOIN="${DEVICE}1"
    ROOT_PARTITIOIN="${DEVICE}2"
fi;

# Check if DEVICE is a block DEVICE
if [[ ! -b "${DEVICE}" ]]; then
    echo "${DEVICE} is not a block DEVICE"
    exit 1
fi;

# Exit bash script if any command fails
set -e

#*******************Formatting the SD****************#

# Unmount DEVICEs
if grep -qs "${BOOT_PARTITIOIN}" /proc/mounts; then
    umount ${BOOT_PARTITIOIN}
	echo "$[NOTE] $PARTITION_1 unmounted"
else 
	echo "$[WARNING] No SD card partition(s) found"
fi;
if grep -qs "${ROOT_PARTITIOIN}" /proc/mounts; then
    umount ${ROOT_PARTITIOIN}
fi;

# Check for the version (Feel free to change #sfdisk --version | grep 2.26)
sfdisk --version | grep 2.26

if [ $? -eq 0 ]; then
	# Make the Raspbian partition table, sfdisk 2.26
	sfdisk --force ${DEVICE} <<HEREDOC
unit: sectors

8192   +60M c
131072 +    L
HEREDOC

else
	# Make the Raspbian partition table, older sfdisk versions
	sfdisk --force ${DEVICE} <<HEREDOC
unit: sectors 

partition1 : start=2048,   size=131072, Id=e, bootable
partition2 : start=133120, size=,       Id=83
partition3 : start=0,      size=0,      Id=0
partition4 : start=0,      size=0,      Id=0
HEREDOC

fi

# Make filesystems
mkfs.vfat ${BOOT_PARTITIOIN}
mkfs.ext4 -m 0 ${ROOT_PARTITIOIN}

# Label filesystems
dosfslabel ${BOOT_PARTITIOIN} BOOT_PRT
e2label ${ROOT_PARTITIOIN} RASPBIAN_PRT

# Mount partitions
rm -rf /media/os
mkdir /media/os
mount ${ROOT_PARTITIOIN} /media/os
mkdir /media/os/boot
mount ${BOOT_PARTITIOIN} /media/os/boot

echo "Formatting FINISH"

#***********Extracting the Operating System*********#
  
# Coppying the tarball
echo "Extracting the Operating System files to $DEVICE. This may take few minutes"	
pv --bytes --progress --timer --eta $TARBALL_PATH | bsdtar -xpf - -C /media/os/

#************Making Custom Configurations************#

# Copy the shine seniors folder
echo "$NOTE Start coppying the Shine folder"
cp -avrf "$SHINE_FOLDER" "$ROOT_FOLDER_SD"
if [ $? -eq 0 ]; then
	echo "$NOTE Shine folder was coppied"
else
	echo "$ERR Shine folder couldn't be coppied. Script will now terminate"
	cleanup_on_exit
	exit 1
fi

# Check if the config file exists
if [ -e $CONFIG_FILE ]; then
	echo "$NOTE Found the config file, $CONFIG_FILE!"
else
	echo "$ERR Config file does not exist! Script will now terminate"
	cleanup_on_exit
	exit 1
fi

# Change the node ID value
sed -i "s/\($NODE_ID_VAR_NAME *\t\t\t\t *\).*/\1$TARGET_NODEID/" $CONFIG_FILE
echo "[NOTICE] $NODE_ID_VAR_NAME is set to $TARGET_NODEID."

#***********Remotely Copying the SSH-keys***********#
# If no key to key-server provided
if [ -z "$KEYSERVER_KEY" ]; then
	echo "$WARN No key to key-server is provided"
fi

# If key is provided but does not exist, quit
if [ ! -z "$KEYSERVER_KEY" ]; then
	if [ ! -e "$KEYSERVER_KEY" ]; then
		# Throw error and exit
		echo -e "$ERR Key file $KEYSERVER_KEY can't be found. Will not work\nExiting ..."
		cleanup_on_exit
		exit 1
	else
		rm -rf /tmp/shine
		mkdir /tmp/shine
		# Copying the files from the server		
		sudo scp -i $KEYSERVER_KEY -o StrictHostKeyChecking=no $KEYSERVER_USERNAME@$KEYSERVER_LOCATION:$SHINEGW_FILES_DIR/$SSH_KEYFILE_NAME /tmp/shine/
		if [ $? -ne 0 ]; then
			echo "$ERR There was trouble fetching the files remotely from $KEYSERVER_LOCATION. Terminating script now."
			cleanup_on_exit
			exit 1
		fi
		# Coyping the files locally
		cp -avrf /tmp/shine/"$SSH_KEYFILE_NAME" "$SHINE_FOLDER_SD"
		if [ $? -eq 0 ]; then
			echo "$NOTE ssk-key file was sucessfully coppied to $SHINE_FOLDER_SD"
			rm -rf /tmp/shine
		else
			echo -e "$ERR There was trouble copying the ssh-key locally from $SHINE_FOLDER/temp/ to $SHINE_FOLDER_SD\n Terminating script now."
			cleanup_on_exit
			exit 1
		fi
	fi
fi
#**********Changeing the File Permissions***********#
# shine folder Files
chmod 700 $SHINE_FOLDER_SD
if [ $? -eq 0 ]; then
	echo "$NOTE Permission changed for Shine Folder"
else
	echo "$ERR Permission changed for Shine Folder FAILED!!!"
	echo "$ERR Programmes will not run properly"
	echo "Exiting"
	exit 1
fi

# .sh Files
find $SHINE_FOLDER_SD -name "*.sh" -type f -exec chmod +x {} \;
if [ $? -eq 0 ]; then
	echo "$NOTE Permission changed for .sh file(s)"
else
	echo "$ERR Permission changed for .sh file(s) FAILED!!!"
	echo "$ERR Programmes will not run properly"
	echo "Exiting"
	exit 1
fi

# .elf files
find $SHINE_FOLDER_SD -name "*.elf" -type f -exec chmod +x {} \;
if [ $? -eq 0 ]; then
	echo "$NOTE Permission changed for .elf file(s)"
else
	echo "$ERR Permission changed for .elf file(s) FAILED!!!"
	echo "$ERR Programmes will not run properly"
	echo "Exiting"
	exit 1
fi

# .pl files
find $SHINE_FOLDER_SD -name "*.pl" -type f -exec chmod +x {} \;
if [ $? -eq 0 ]; then
	echo "$NOTE Permission changed for .pl file(s)"
else
	echo "$ERR Permission changed for .elf file(s) FAILED!!!"
	echo "$ERR Programmes will not run properly"
	echo "Exiting"
	exit 1
fi

# ssh-key file
chmod 600 $SSH_KEYFILE
if [ $? -eq 0 ]; then
	echo "$NOTE Permission changed for the ssh-key"
else
	echo "$ERR Permission changed for ssh-key FAILED!!!"
	echo "$ERR Programmes will not run properly"
	echo "Exiting"
	exit 1
fi

# Change the hostname of the RPi
#For the hostname file
if [ -e $HOST_NAME ]; then
	echo "$NOTE Found the hostname file. Changing hostname to shine-$TARGET_NODEID"

	echo "shine-$TARGET_NODEID" > "$HOST_NAME"
	if [ $? -eq 0 ]; then
		echo "$NOTE Hostname successfully changed"
	else
		echo "$ERR Changing hostname file failed! The overlay will probably not work too"
	fi

else
	echo "$ERR Config file does not exist! Script will now terminate"
	cleanup_on_exit
	exit 1
fi
#For the hosts file
if [ -e $HOSTS_FILE ]; then
	echo "$NOTE Found the hosts file. Changing hostname to shine-$TARGET_NODEID"

	sed -i "s/\(127.0.1.1 *\t\t\t\t *\).*/\1shine-$TARGET_NODEID/" $HOSTS_FILE
	if [ $? -eq 0 ]; then
		echo "$NOTE Hostname successfully changed"
	else
		echo "$ERR Changing hostname file failed! The overlay will probably not work too"
	fi

else
	echo "$ERR Config file does not exist! Script will now terminate"
	cleanup_on_exit
	exit 1
fi

#Flush the cash and exit
echo "$NOTE Flushing the cash, this may take few minutes"
sync

cleanup_on_exit

echo "JOB DONE! Remove the SD card from the slot"

exit 0
